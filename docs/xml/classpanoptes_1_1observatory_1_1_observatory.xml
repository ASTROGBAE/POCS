<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classpanoptes_1_1observatory_1_1_observatory" kind="class" prot="public">
    <compoundname>panoptes::observatory::Observatory</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classpanoptes_1_1observatory_1_1_observatory_1a1dffeafb7b1cec46ad302a1e9a9f4d04" prot="public" static="no" mutable="no">
        <type></type>
        <definition>panoptes.observatory.Observatory::moon</definition>
        <argsstring></argsstring>
        <name>moon</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="41" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpanoptes_1_1observatory_1_1_observatory_1a9f9dbdeb719efedfc6327c47df5dc539" prot="public" static="no" mutable="no">
        <type></type>
        <definition>panoptes.observatory.Observatory::site</definition>
        <argsstring></argsstring>
        <name>site</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="42" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpanoptes_1_1observatory_1_1_observatory_1a52e3462aa60c4093cf5d425e2dabbbbf" prot="public" static="no" mutable="no">
        <type></type>
        <definition>panoptes.observatory.Observatory::mount</definition>
        <argsstring></argsstring>
        <name>mount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="45" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpanoptes_1_1observatory_1_1_observatory_1ac2fc3fd565bd16a5121f34fcd6ed2133" prot="public" static="no" mutable="no">
        <type></type>
        <definition>panoptes.observatory.Observatory::cameras</definition>
        <argsstring></argsstring>
        <name>cameras</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="46" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpanoptes_1_1observatory_1_1_observatory_1afaf53a659f62e87d468af2aedbcb7c96" prot="public" static="no" mutable="no">
        <type></type>
        <definition>panoptes.observatory.Observatory::states</definition>
        <argsstring></argsstring>
        <name>states</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="51" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpanoptes_1_1observatory_1_1_observatory_1a6b12dda5e44f6b2f52c02156d3e6e35c" prot="public" static="no" mutable="no">
        <type></type>
        <definition>panoptes.observatory.Observatory::current_state</definition>
        <argsstring></argsstring>
        <name>current_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="65" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpanoptes_1_1observatory_1_1_observatory_1a78c685049f1bc443b7107271e2828d88" prot="public" static="no" mutable="no">
        <type></type>
        <definition>panoptes.observatory.Observatory::is_dark</definition>
        <argsstring></argsstring>
        <name>is_dark</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="207" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="207" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpanoptes_1_1observatory_1_1_observatory_1ab431c6cf5291e3bb2bc53b6bfea4adac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def panoptes.observatory.Observatory.__init__</definition>
        <argsstring></argsstring>
        <name>__init__</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Starts up the observatory. Reads config file (TODO), sets up location,
dates, mount, cameras, and weather station
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="32" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="32" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classpanoptes_1_1observatory_1_1_observatory_1a55587da6a50d3638d8d4e0b2803d19bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def panoptes.observatory.Observatory.setup_site</definition>
        <argsstring></argsstring>
        <name>setup_site</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Sets up the site, i.e. location details, for the observatory. These items
are read from the &apos;site&apos; config directive and include:
* lat (latitude)
* lon (longitude)
* elevation
* horizon

Also sets up observatory.sun and observatory.moon computed from this site 
location.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="67" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="67" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classpanoptes_1_1observatory_1_1_observatory_1ac43a8abc9dd9a29b4faafb1c2d1e8195" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def panoptes.observatory.Observatory.create_mount</definition>
        <argsstring></argsstring>
        <name>create_mount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>This will create a mount object
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="103" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="103" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classpanoptes_1_1observatory_1_1_observatory_1a00eb4d1352c05f6e95a7e1f5d3f08f43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def panoptes.observatory.Observatory.create_cameras</definition>
        <argsstring></argsstring>
        <name>create_cameras</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Creates and connects to the cameras
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="126" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="126" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classpanoptes_1_1observatory_1_1_observatory_1ae44d9246bc3e029933523bcdee02561e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def panoptes.observatory.Observatory.create_weather_station</definition>
        <argsstring></argsstring>
        <name>create_weather_station</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>This will create a weather station object
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="147" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="147" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classpanoptes_1_1observatory_1_1_observatory_1aebdf4674e0f0afb451edc59f3ede600a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def panoptes.observatory.Observatory.start_observing</definition>
        <argsstring></argsstring>
        <name>start_observing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>The main start method for the observatory-. Usually called from a driver program.
Puts observatory into a loop
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="154" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="154" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classpanoptes_1_1observatory_1_1_observatory_1a6c812191d1d3c58afeb03de66809ffab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def panoptes.observatory.Observatory.get_state</definition>
        <argsstring></argsstring>
        <name>get_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Simply returns current_state
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="168" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="168" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classpanoptes_1_1observatory_1_1_observatory_1ac9e4739fd18ba7f42ae23fff745ef9b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def panoptes.observatory.Observatory.query_conditions</definition>
        <argsstring></argsstring>
        <name>query_conditions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="174" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="174" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classpanoptes_1_1observatory_1_1_observatory_1a588bac17589c004aac6df05f9b5a3f0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def panoptes.observatory.Observatory.heartbeat</definition>
        <argsstring></argsstring>
        <name>heartbeat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Touch a file each time signaling life
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="189" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="189" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classpanoptes_1_1observatory_1_1_observatory_1a46716d838d3f1bf897407da72e8bcfae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def panoptes.observatory.Observatory.is_dark</definition>
        <argsstring></argsstring>
        <name>is_dark</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Need to calculate day/night for site
Initial threshold 12 deg twilight
self.site.date = datetime.datetime.now()
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="197" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="197" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classpanoptes_1_1observatory_1_1_observatory_1a3331309c1cc15b51a47b1371d7366275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def panoptes.observatory.Observatory.while_shutdown</definition>
        <argsstring></argsstring>
        <name>while_shutdown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>The shutdown state happens during the day, before components have been
connected.

From the shutdown state, you can go to sleeping.  This transition should be
triggered by timing.  At a user configured time, the system will connect to
components and start cooling the camera in preparation for observing.  This
time checking should be built in to this while_shutdown function and trigger
a change of state.

In shutdown state:
- it is:                day
- camera connected:     no
- camera cooling:       N/A
- camera cooled:        N/A
- camera exposing:      N/A
- mount connected:      no
- mount tracking:       N/A
- mount slewing:        N/A
- mount parked:         N/A
- weather:              N/A
- target chosen:        N/A
- test image taken:     N/A
- target completed:     N/A
- analysis attempted:   N/A
- analysis in progress: N/A
- astrometry solved:    N/A
- levels determined:    N/A

Timeout Condition:  This state has a timeout built in as it will end at a
given time each day.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="211" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="211" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classpanoptes_1_1observatory_1_1_observatory_1a509beda765bd5f7bfa9a90f9c11778b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def panoptes.observatory.Observatory.while_sleeping</definition>
        <argsstring></argsstring>
        <name>while_sleeping</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>The sleeping state happens during the day, after components have been
connected, while we are waiting for darkness.

From the sleeping state you can go to parking and getting ready.  Moving to
parking state should be triggered by bad weather.  Moving to getting ready
state should be triggered by timing.  At a user configured time (i.e. at
the end of twilight), the system will go to getting ready.

In sleeping state:
- it is:                day
- camera connected:     yes
- camera cooling:       no
- camera cooled:        N/A
- camera exposing:      no
- mount connected:      yes
- mount tracking:       no
- mount slewing:        no
- mount parked:         yes
- weather:              N/A
- target chosen:        N/A
- test image taken:     N/A
- target completed:     N/A
- analysis attempted:   N/A
- analysis in progress: N/A
- astrometry solved:    N/A
- levels determined:    N/A

Timeout Condition:  This state does not have a formal timeout, but should
check to see if it is night as this state should not happen during night.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="292" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="292" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classpanoptes_1_1observatory_1_1_observatory_1ab13eb129f589014a3bb9405f6b744294" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def panoptes.observatory.Observatory.while_getting_ready</definition>
        <argsstring></argsstring>
        <name>while_getting_ready</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>The getting ready state happens while it is dark, it checks if we are ready
to observe.

From the getting ready state, you can go to parking and scheduling.

In the getting ready state:
- it is:                night
- camera connected:     yes
- camera cooling:       on
- camera cooled:        no
- camera exposing:      no
- mount connected:      yes
- mount tracking:       no
- mount slewing:        no
- mount parked:         N/A
- weather:              safe
- target chosen:        no
- test image taken:     N/A
- target completed:     N/A
- analysis attempted:   N/A
- analysis in progress: N/A
- astrometry solved:    N/A
- levels determined:    N/A

To transition to the scheduling state the camera must reach the cooled
condition.

Timeout Condition:  There should be a reasonable timeout on this state.  The
timeout period should be set such that the camera can go from ambient to
cooled within the timeout period.  The state should only timeout under
extreme circumstances as the cooling process should monitor whether the
target temperature is reachable and adjust the camera set point higher if
needed and this may need time to iterate and settle down to operating temp.
If a timeout occurs, the system should go to parking state.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="428" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="428" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="classpanoptes_1_1observatory_1_1_observatory_1ac46fdd3ecf9bee4922cb1496e3e94fcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def panoptes.observatory.Observatory.while_scheduling</definition>
        <argsstring></argsstring>
        <name>while_scheduling</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>The scheduling state happens while it is dark after we have requested a
target from the scheduler, but before the target has been returned.  This
assumes that the scheduling happens in another thread.

From the scheduling state you can go to the parking state and the
slewing state.

In the scheduling state:
- it is:                night
- camera connected:     yes
- camera cooling:       on
- camera cooled:        yes
- camera exposing:      no
- mount connected:      yes
- mount tracking:       no
- mount slewing:        no
- mount parked:         either
- weather:              safe
- target chosen:        no
- test image taken:     N/A
- target completed:     N/A
- analysis attempted:   N/A
- analysis in progress: N/A
- astrometry solved:    N/A
- levels determined:    N/A

To transition to the slewing state, the target field must be populated, then
the slew command is sent to the mount.

This sets:
- target chosen:        yes
- test image taken:     no
- target completed:     no
- analysis attempted:   no
- analysis in progress: no
- astrometry solved:    no
- levels determined:    no

Timeout Condition:  A reasonable timeout period for this state should be
set.  Some advanced scheduling algorithms with many targets to consider may
need a significant amount of time to schedule, but that reduces observing
efficiency, so I think the timout for this state should be of order 10 sec.
If a timeout occurs, the system should go to getting ready state.  This does
allow a potential infinite loop scenario if scheduling is broken, because
going to the getting ready state will usually just bouce the system back to
scheduling, but this is okay because it does not endanger the system as it
will still park on bad weather and at the end of the night.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="579" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="579" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="classpanoptes_1_1observatory_1_1_observatory_1ae535d4c88bf2b52f5936298525c202f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def panoptes.observatory.Observatory.while_slewing</definition>
        <argsstring></argsstring>
        <name>while_slewing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>The slewing state happens while the system is slewing to a target position
(note: this is distinct from the slew which happens on the way to the park
position).

From the slewing state, you can go to the parking state, the taking
test image state, and the imaging state.

In the slewing state:
- it is:                night
- camera connected:     yes
- camera cooling:       on
- camera cooled:        yes
- camera exposing:      no
- mount connected:      yes
- mount tracking:       no
- mount slewing:        yes
- mount parked:         no
- weather:              safe
- target chosen:        yes
- test image taken:     either
- target completed:     no
- analysis attempted:   no
- analysis in progress: no
- astrometry solved:    no
- levels determined:    no

To go to the taking test image state, the slew must complete and test image
taken is no.

To go to the imaging state, the slew must complete and the test image taken
must be yes.

Completion of the slew sets:
- mount slewing:        no

Timeout Condition:  There should be a reasonable timeout condition on the
slew which allows for long slews with a lot of extra time for settling and
other considerations which may vary between mounts.  If a timeout occurs,
the system should go to getting ready state.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="745" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="745" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="classpanoptes_1_1observatory_1_1_observatory_1aca4c05d32e9d7ac3e4d7bf3d8e50fb29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def panoptes.observatory.Observatory.while_taking_test_image</definition>
        <argsstring></argsstring>
        <name>while_taking_test_image</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>The taking test image state happens after one makes a large (threshold
controlled by a setting) slew.  The system takes a short image, plate solves
it, then determines the pointing offset and commands a correcting slew.  One
might also check the image background levels in this test image an use them
to set the exposure time in the science image.

Note:  One might argue that this is so similar to the imaging state that
they should be merged in to one state, but I think this is a useful
distinction to make as the settings for the test image will be different
than a science image.  For example, for a given target, only one test image
needs to be taken, where we probably want &gt;1 science image.  Also, we can
use a flag to turn off this operation.

From the taking test image state, you can go to the parking state
and the analyzing state.

In the taking test image state:
- it is:                night
- camera connected:     yes
- camera cooling:       on
- camera cooled:        yes
- camera exposing:      yes
- mount connected:      yes
- mount tracking:       yes
- mount slewing:        no
- mount parked:         no
- weather:              safe
- target chosen:        yes
- test image taken:     no
- target completed:     no
- analysis attempted:   no
- analysis in progress: no
- astrometry solved:    no
- levels determined:    no

To move to the analyzing state, the image must complete:

This sets:
- test image taken:     yes

Timeout Condition:  A reasonable timeout should be set which allows for a
short exposure time, plus download time and some additional overhead.  If a
timeout occurs, ... actually I&apos;m not sure what should happen in this case.
Going to getting ready state will also just wait for the image to finish, so
nothing is gained relative to having no timeout.  This suggests that we DO
need a method to cancel an exposure which is invoked in case of a timeout,
which is something I had specifically hoped NOT to have to create.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="815" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="815" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="classpanoptes_1_1observatory_1_1_observatory_1abd1ba7c1a23f3acb10e04e76fbc207c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def panoptes.observatory.Observatory.while_analyzing</definition>
        <argsstring></argsstring>
        <name>while_analyzing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>The analyzing state happens after one has taken an image or test image.  It
always operates on the last image taken (whose file name should be stored
in a variable somewhere).

From the analyzing state, you can go to the parking state, the
getting ready state, or the slewing state.

In the analyzing state:
- it is:                night
- camera connected:     yes
- camera cooling:       on
- camera cooled:        yes
- camera exposing:      no
- mount connected:      yes
- mount tracking:       yes
- mount slewing:        no
- mount parked:         no
- weather:              safe
- target chosen:        yes
- test image taken:     yes
- target completed:     no
- analysis attempted:   no
- analysis in progress: no
- astrometry solved:    no
- levels determined:    no

If the analysis is successful, this sets:
- analysis attempted:   yes
- analysis in progress: yes
- astrometry solved:    yes
- levels determined:    yes

As part of analysis step, the system compares the number of images taken of
this target since it was chosen to the minimum number requested by scheduler
(typically three).  If we have taken enough images of this target, we set
target completed to yes, if not, we leave it at no.

To move to the slewing state, target complete must be no and astrometry
solved is yes.  The slew recenters the target based on the astrometric
solution.

To move to the getting ready state, the target completed must be yes.  After
a brief stop in getting ready state (to check that all systems are still
ok), we would presumably go back to scheduling.  The scheduler may choose to
observe this target again.  The minimum number of images is just that, a
minimum, it defines the smallest schedulable block.

We need to discuss what happens when analysis fails.

Timeout Condition:  A readonable timeout should be set.  If a timeout
occurs, we should handle that identically to a failure of the analysis.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="870" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="870" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="classpanoptes_1_1observatory_1_1_observatory_1ae5ff1896f8bf40fb517dfd8b30371afb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def panoptes.observatory.Observatory.while_imaging</definition>
        <argsstring></argsstring>
        <name>while_imaging</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>This state happens as the camera is exposing.

From the imaging state, you can go to the parking statee and the analyzing
state.

Note: as we are currently envisioning the system operations, you can not
cancel an exposure.  The logic behind this is that if we want to go to a
parked state, then we don&apos;t care about the image and it is easy to simply
tag an image header with information that the exposure was interrupted by
a park operation, so we don&apos;t care if the data gets written to disk in this
case.  This avoids the requirement of writing complicated exposure
cancelling code in to each camera driver.

As a result, if the system has to park during an
exposure (i.e. if the weather goes bad), the camera will contine to expose.
This means that there are cases when the camera is exposing, but you are not
in the imaging state.  There are some edge cases we need to test (especially
in the parking and parked states) to ensure that the camera exposure
finishes before those states are left.

When we enter this state, we must reset the following:
- analysis attempted:   no
- analysis in progress: no
- astrometry solved:    no
- levels determined:    no

In the imaging state:
- it is:                night
- camera connected:     yes
- camera cooling:       on
- camera cooled:        yes
- camera exposing:      yes
- mount connected:      yes
- mount tracking:       yes
- mount slewing:        no
- mount parked:         no
- weather:              safe
- target chosen:        yes
- test image taken:     yes
- target completed:     no
- analysis attempted:   no
- analysis in progress: no
- astrometry solved:    no
- levels determined:    no

Timeout Condition:  A reasonable timeout should be set is based on the
exposure time, plus download time and some additional overhead.  If a
timeout occurs, ... actually I&apos;m not sure what should happen in this case.
Going to getting ready state will also just wait for the image to finish, so
nothing is gained relative to having no timeout.  This suggests that we DO
need a method to cancel an exposure which is invoked in case of a timeout,
which is something I had specifically hoped NOT to have to create.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="929" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="929" bodyend="988"/>
      </memberdef>
      <memberdef kind="function" id="classpanoptes_1_1observatory_1_1_observatory_1a6fd05c8d12d8c16f455a0902c2021f4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def panoptes.observatory.Observatory.while_parking</definition>
        <argsstring></argsstring>
        <name>while_parking</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>This is the state which is the emergency exit.  A park command has been
issued to put the system in a safe state, but we have not yet reached the
park position.

From the parking state, one can only exit to the parked state.

Timeout Condition:  There are two options I see for a timeout on the parking
state.  The first is to not have a timeout simply because if a park has been
commanded, then we should assume that it is critical to safety to park and
nothing should interrupt a park command.  Alternatively, I can imagine
wanting to resend the park command if the system does not reach park.  The
downside to this is that we might end up in a repeating loop of issuing a
park command to the mount over and over again in a situation where there is
a physical obstruction to the park operation and this damages the motors.
There might be a third alternative which is to limit the number of retries
on the park command after timeouts.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="989" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="989" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="classpanoptes_1_1observatory_1_1_observatory_1a0ed21632aecf0679bb0275a4855cb747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def panoptes.observatory.Observatory.while_parked</definition>
        <argsstring></argsstring>
        <name>while_parked</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>The parked state is where the system exists at night when not observing.
During the day, we are at the physical parked position for the mount, but
we would be in either the shutdown or sleeping state.

From the parked state we can go to shutdown (i.e. when the night ends), or
we can go to getting ready (i.e. it is still night, conditions are now safe,
and we can return to operations).

Timeout Condition:  There is a natural timeout to this state which occurs at
the end of the night which causes a transition to the shutdown state.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="1013" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="1013" bodyend="1030"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>Main Observatory class
</verbatim> </para>    </detaileddescription>
    <location file="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" line="26" column="1" bodyfile="/home/wtgee/Projects/Panoptes/POCS/panoptes/observatory.py" bodystart="26" bodyend="1030"/>
    <listofallmembers>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1ab431c6cf5291e3bb2bc53b6bfea4adac" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>__init__</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1ac2fc3fd565bd16a5121f34fcd6ed2133" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>cameras</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1a00eb4d1352c05f6e95a7e1f5d3f08f43" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>create_cameras</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1ac43a8abc9dd9a29b4faafb1c2d1e8195" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>create_mount</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1ae44d9246bc3e029933523bcdee02561e" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>create_weather_station</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1a6b12dda5e44f6b2f52c02156d3e6e35c" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>current_state</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1a6c812191d1d3c58afeb03de66809ffab" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>get_state</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1a588bac17589c004aac6df05f9b5a3f0d" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>heartbeat</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1a78c685049f1bc443b7107271e2828d88" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>is_dark</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1a46716d838d3f1bf897407da72e8bcfae" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>is_dark</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1a1dffeafb7b1cec46ad302a1e9a9f4d04" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>moon</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1a52e3462aa60c4093cf5d425e2dabbbbf" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>mount</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1ac9e4739fd18ba7f42ae23fff745ef9b2" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>query_conditions</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1a55587da6a50d3638d8d4e0b2803d19bc" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>setup_site</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1a9f9dbdeb719efedfc6327c47df5dc539" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>site</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1aebdf4674e0f0afb451edc59f3ede600a" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>start_observing</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1afaf53a659f62e87d468af2aedbcb7c96" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>states</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1abd1ba7c1a23f3acb10e04e76fbc207c7" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>while_analyzing</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1ab13eb129f589014a3bb9405f6b744294" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>while_getting_ready</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1ae5ff1896f8bf40fb517dfd8b30371afb" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>while_imaging</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1a0ed21632aecf0679bb0275a4855cb747" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>while_parked</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1a6fd05c8d12d8c16f455a0902c2021f4c" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>while_parking</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1ac46fdd3ecf9bee4922cb1496e3e94fcc" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>while_scheduling</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1a3331309c1cc15b51a47b1371d7366275" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>while_shutdown</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1a509beda765bd5f7bfa9a90f9c11778b1" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>while_sleeping</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1ae535d4c88bf2b52f5936298525c202f7" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>while_slewing</name></member>
      <member refid="classpanoptes_1_1observatory_1_1_observatory_1aca4c05d32e9d7ac3e4d7bf3d8e50fb29" prot="public" virt="non-virtual"><scope>panoptes::observatory::Observatory</scope><name>while_taking_test_image</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
