#!/usr/bin/env python3
import cmd
import readline
import time

from multiprocessing import Process
from pprint import pprint

from pocs import POCS

from pocs.utils.messaging import PanMessaging


class PocsShell(cmd.Cmd):
    """ A simple command loop for running the PANOPTES Observatory Control System """
    intro = 'Welcome to PocsShell! Type ? for help'
    prompt = 'PanShell > '
    pocs = None
    _keep_looping = False
    _loop_delay = 60
    _timer = None
    messaging = None
    procs = dict()
    paws_listener = None

    def do_move_mount(self, direction, seconds):
        """ Move the mount

        Moves mount for number of `seconds` in given `direction`

        Note:
            This does no error checking and there are no limit switches to avoid
            mount collision with the pier. Use with caution and while viewing
            mount movement.

        Arguments:
            direction {str} -- One of 'north', 'south', 'east', 'west'
            seconds {float} -- Number of seconds to move mount
        """
        self.pocs.observatory.mount.move_direction(direction=direction, seconds=seconds)

    def do_status(self, *arg):
        """ Show system status

        This will show the current state of the observatory, including the
        mount, state machine, etc.

        Arguments:
            *arg {str} -- Unused for now but accepts args
        """
        if self.pocs:
            status = self.pocs.status()
            pprint(status)
        else:
            print("POCS has not been connected yet")

    def do_connect(self, *arg):
        """ Setup POCS

        Note: This can be called with various arguments:
            * connect: Connect to live unit
            * connect simulator: Start in simulator mode
            * connect detect: automatically detect camera ports

        Arguments:
            *arg {str} -- Correspond to type listed in Note above
        """
        self.messaging = PanMessaging(publisher=True, connect=True, bind=False)

        if 'simulator' in arg:
            self.pocs = POCS(simulator=['all'], messaging=self.messaging)
        elif 'detect' in arg:
            self.pocs = POCS(auto_detect=True, messaging=self.messaging)
        else:
            self.pocs = POCS(messaging=self.messaging)

        self.pocs.initialize()

    def do_send_message(self, msg, channel='PANSHELL'):
        """ Send a message

        Send a message to the specified channel. Central messaging system needs
        to be running (see `pocs/utils/messaging`)

        Arguments:
            msg {str} -- The message to be sent

        Keyword Arguments:
            channel {str} -- The channel to send the message on (default: {'PANSHELL'})
        """
        self.messaging.send_message(channel, msg)

    def do_start_listener(self, *arg):
        """ Listen for messages from PAWS

        Note:
            This is not used on the PAWS side as of right now as we don't want to
            allow web based control

        Arguments:
            *arg {str} -- Unused for now
        """
        if self.paws_listener is None:
            print("Starting PAWS listener")
            self.paws_listener = self.messaging.register_listener(channel='PAWS', port=6502, connect=True)

            def get_msg(socket, pocs):
                while True:
                    msg_type, msg = socket.recv_string().split(' ', maxsplit=1)
                    if msg == 'get_status':
                        print("PAWS asked for status")
                        pocs.do_status()
                    else:
                        print("Message from PAWS: {} {}".format(msg_type, msg))

                    time.sleep(1)

            self.procs['paws_listener'] = Process(target=get_msg, args=(self.paws_listener, self.pocs, ))
            self.procs['paws_listener'].start()
        else:
            print("Listener running with PID: {}".format(self.procs['paws_listener'].pid))

    def do_list_cameras(self, *arg):
        """ List connected cameras

        This will show the cameras that are connected and whether they are
        primary, guide, etc.

        Arguments:
            *arg {str} -- Unused for now
        """
        if self.pocs:
            for cam_name, cam in self.pocs.observatory.cameras.items():
                print("Name:\t", cam_name)
                print("UID:\t", cam.uid)
                print("Primary:", cam.is_primary)
                print("Guide:\t", cam.is_guide)
                print("Port:\t", cam.port)
                print("")
        else:
            print("POCS has not been connected yet")

    def do_start(self, *arg):
        """ Start POCS in a loop with a callback Timer """
        if not self.pocs:
            self.do_connect(*arg)

        if self.pocs:
            print("Starting POCS")
            try:
                self.pocs.run()
            except KeyboardInterrupt:
                print("Interrupted, stopping")
                self.pocs.stop_machine()

    def do_stop(self, *arg):
        """ Stop POCS """
        if self.pocs:
            print("Shutting down POCS, please be patient")
            self.pocs.power_down()

    def emptyline(self):
        self.do_status()

    def do_exit(self, *arg):
        """ Exits PanShell """
        print("Shutting down")

        for name, proc in self.procs.items():
            print("Shutting down {}".format(name))
            proc.join(30)
            if proc.is_alive():
                proc.terminate()

        print("Bye! Thanks!")
        return True


if __name__ == '__main__':
    import os
    import sys

    if not os.getenv('POCS'):
        sys.exit("Please set the POCS environment variable.")

    PocsShell().cmdloop()
