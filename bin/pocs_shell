#!/usr/bin/env python3
import cmd
import readline
import time

from multiprocessing import Process

from pocs import POCS

from pocs.utils.messaging import PanMessaging


class PocsShell(cmd.Cmd):
    """ A simple command loop for running the PANOPTES Observatory Control System """
    intro = 'Welcome to PocsShell! Type ? for help'
    prompt = 'PanShell > '
    pocs = None
    _keep_looping = False
    _loop_delay = 60
    _timer = None
    verbose = False
    messaging = None
    procs = dict()
    paws_listener = None

    def do_status(self, *arg):
        status = self.pocs.status()
        if self.verbose:
            print(status)

    def do_connect(self, *arg):
        """ Setup POCS """
        self.messaging = PanMessaging(publisher=True, connect=True, bind=False)

        if self.paws_listener is None:
            self.do_start_listener()

        if 'simulator' in arg:
            self.pocs = POCS(simulator=['all'], messaging=self.messaging)
        elif 'detect' in arg:
            self.pocs = POCS(auto_detect=True, messaging=self.messaging)
        else:
            self.pocs = POCS(messaging=self.messaging)

    def do_send_message(self, msg, channel='PANSHELL'):
        self.messaging.send_message(channel, msg)

    def do_start_listener(self, *arg):
        if self.paws_listener is None:
            self.paws_listener = self.messaging.register_listener(channel='PAWS', port=6502, connect=True)

            def get_msg():
                while True:
                    msg_type, msg = self.paws_listener.recv_string().split(' ', maxsplit=1)
                    if msg == 'get_status':
                        print("PAWS asked for status")
                        self.do_status()
                    else:
                        print("Message from PAWS: {} {}".format(msg_type, msg))

                    time.sleep(1)

            self.procs['paws_listener'] = Process(target=get_msg)
            self.procs['paws_listener'].start()

    def do_start(self, *arg):
        """ Start POCS in a loop with a callback Timer """
        if not self.pocs:
            self.do_connect(*arg)

        if self.pocs:
            print("Starting POCS")
            try:
                self.pocs.get_ready()
            except KeyboardInterrupt:
                print("Interrupted, stopping")
                self.do_stop()

    def do_stop(self, *arg):
        """ Stop POCS """
        if self.pocs:
            print("Shutting down POCS, please be patient")
            self.pocs.power_down()

    def emptyline(self):
        self.do_status()

    def do_exit(self, *arg):
        """ Exits PanShell """
        print("Shutting down")

        for name, proc in self.procs.items():
            print("Shutting down {}".format(name))
            proc.join(30)
            if proc.is_alive():
                proc.terminate()

        print("Bye! Thanks!")
        return True


if __name__ == '__main__':
    import os
    import sys

    if not os.getenv('POCS'):
        sys.exit("Please set the POCS environment variable.")

    PocsShell().cmdloop()
