#!/usr/bin/env python3

import os
import signal
import sys
import argparse
import time
import datetime

from astropy import units as u

# Append the POCS dir to the system path.
pocs_dir = os.getenv('POCS', '/var/panoptes/POCS')

sys.path.append(pocs_dir)

from panoptes.core import Panoptes

# Constants
park_ha = 290 * u.deg
flip_ha = 20 * u.deg
DAY, NIGHT = 1, 2

on_time = datetime.time(7, 30)       # Morning
off_time = datetime.time(21, 55)     # Night


def main():

    parser = argparse.ArgumentParser(
        description='Start the PANOPTES Imiloa demo unit.',
        epilog="Don't forget to set the $POCS environment variable."
    )
    parser.add_argument('--simulator', action="append", default=['weather', 'camera'],
                        help='Run the unit in simulator mode. Possible values are: all, mount, camera, weather, none')
    parser.add_argument('--move-speed', default=7, help='How fast the demo moves')
    parser.add_argument('--auto-detect', action='store_true', default=True, help='Attempt to auto detect the camera ports, defaults to True.')

    args = parser.parse_args()

    # Create the unit and start up.
    pan = Panoptes(**vars(args))

    def _sigint_handler(pan):
        """
        Interrupt signal handler. Designed to intercept a Ctrl-C from
        the user and properly shut down the system.
        """
        try:
            pan.power_down()
        except Exception as e:
            print("Problem shutting down: {}".format(e))
        finally:
            sys.exit(0)

    signal.signal(signal.SIGINT, _sigint_handler)

    # Get the mount object
    mount = pan.observatory.mount
    mount.initialize()

    # Helper function to go place
    def goto(ha):
        mount.set_park_coordinates(ha=ha)
        mount.set_target_coordinates(mount._park_coordinates)
        mount.serial_query('park')
        while not mount.is_parked:
            time.sleep(0.5)

    # Set a decent moving rate for the unit
    mount.serial_query('set_button_moving_rate', args.move_speed)

    # This does one fake observation, including meridian flip, then returns
    def do_run():
        # Track
        goto(park_ha)
        mount.unpark()
        mount.move_direction('east', seconds=70)

        # Meridian flip
        goto(flip_ha)
        mount.unpark()
        mount.move_direction('east', seconds=50)

        goto(park_ha)

    # Loop forever
    foo = 0
    while True:

        # Check if we should do run or not
        current_time = datetime.datetime.now().time()
        when, matching = check_time(current_time, on_time, off_time)

        if matching or foo >= 2:
            if when == DAY:
                do_run()
                foo = foo + 1
            elif when == NIGHT:
                print("Sleeping...")
                time.sleep(60)


def check_time(time_to_check, on_time, off_time):
    """ Check if we are in out operating times

    Ripped from here and rearranged:
    http://stackoverflow.com/questions/20518122/python-working-out-if-time-now-is-between-two-times
    """
    if on_time > off_time:
        if time_to_check > on_time or time_to_check < off_time:
            return NIGHT, True
    elif on_time < off_time:
        if time_to_check > on_time and time_to_check < off_time:
            return DAY, True
    elif time_to_check == on_time:
        return None, True
    return None, False

if __name__ == '__main__':

    if not os.getenv('POCS'):
        sys.exit("Please set the POCS environment variable.")

    main()
